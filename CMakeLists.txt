cmake_minimum_required(VERSION 2.6)

project (caffe2_cpp_tutorial)

find_package(Protobuf REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(OpenCV REQUIRED)
find_package(cURL QUIET)
find_package(CUDA QUIET)
find_package(Threads)

include_directories(include)
include_directories(${EIGEN3_INCLUDE_DIR})
if(OpenCV_LIBS)
  include_directories(${OpenCV_INCLUDE_DIRS})
endif()
if(CUDA_LIBRARIES)
  include_directories(${CUDA_INCLUDE_DIRS})
endif()

if(NOT DEFINED HIP_PATH)
    if(NOT DEFINED ENV{HIP_PATH})
        set(HIP_PATH "/opt/rocm/hip" CACHE PATH "Path to which HIP has been installed")
    else()
        set(HIP_PATH $ENV{HIP_PATH} CACHE PATH "Path to which HIP has been installed")
    endif()
endif()
set(CMAKE_MODULE_PATH "${HIP_PATH}/cmake" ${CMAKE_MODULE_PATH})

find_library(CAFFE2_LIB Caffe2_CPU)
find_library(CAFFE2_GPU_LIB Caffe2_GPU)
find_library(GLOG_LIB glog)
find_library(GFLAGS_LIB gflags)

if(NOT CAFFE2_LIB)
  message(FATAL_ERROR "Caffe2 lib not found")
endif()

set(ALL_LIBRARIES)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin")

if(NOT EXISTS "${CMAKE_SOURCE_DIR}/include/res/imagenet_classes.h")
  file(DOWNLOAD "https://raw.githubusercontent.com/bwasti/AICamera/master/app/src/main/cpp/classes.h" "${CMAKE_SOURCE_DIR}/include/res/imagenet_classes.h")
endif()

file(GLOB LIB_SOURCES "${CMAKE_SOURCE_DIR}/src/caffe2/util/*.cc" "${CMAKE_SOURCE_DIR}/src/caffe2/operator/*.cc")
list(REMOVE_ITEM LIB_SOURCES "${CMAKE_SOURCE_DIR}/src/caffe2/operator/affine_scale_op_hip.cc" "${CMAKE_SOURCE_DIR}/src/caffe2/operator/back_mean_op_hip.cc" "${CMAKE_SOURCE_DIR}/src/caffe2/operator/diagonal_op_hip.cc" "${CMAKE_SOURCE_DIR}/src/caffe2/operator/mean_stdev_op_hip.cc")
add_library(caffe2_cpp ${LIB_SOURCES})
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  list(APPEND ALL_LIBRARIES -Wl caffe2_cpp)
else()
  list(APPEND ALL_LIBRARIES -Wl,--whole-archive caffe2_cpp -Wl,--no-whole-archive)
endif()

if(CUDA_LIBRARIES)
  # set(CUDA_PROPAGATE_HOST_FLAGS OFF)
  list(APPEND CUDA_NVCC_FLAGS "-std=c++11")
  list(APPEND CUDA_NVCC_FLAGS "-Wno-deprecated-gpu-targets")
  file(GLOB CUDA_SOURCES "${CMAKE_SOURCE_DIR}/src/caffe2/operator/*.cu")
  cuda_add_library(caffe2_cpp_gpu ${CUDA_SOURCES})
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    list(APPEND ALL_LIBRARIES -Wl,-force_load caffe2_cpp_gpu)
  else()
    list(APPEND ALL_LIBRARIES -Wl,--whole-archive caffe2_cpp_gpu -Wl,--no-whole-archive)
  endif()
endif()

find_package(HIP QUIET)
if(${HIP_FOUND})
  find_package( rocblas REQUIRED CONFIG PATHS /opt/rocm/rocBLAS )
  find_package( miopen REQUIRED CONFIG PATHS /opt/rocm/miopen )
  set(Caffe2_HCRNG_DIR "/opt/rocm/hcrng")
  list(APPEND HIP_HIPCC_FLAGS --std=c++11)
  file(GLOB HIP_SOURCES "${CMAKE_SOURCE_DIR}/src/caffe2/operator/*_hip.cc")
  include_directories(/opt/rocm/rocBLAS/include /opt/rocm/hcrng/include)
  hip_add_library(caffe2_cpp_hip SHARED ${HIP_SOURCES})
  target_link_libraries( caffe2_cpp_hip
      PUBLIC rocblas miopen ${Caffe2_HCRNG_DIR}/lib/libhiprng_hcc.so
      PUBLIC hip::hip_hcc hip::hip_device -Wl,-Bsymbolic )
  target_include_directories( caffe2_cpp_hip PUBLIC $<BUILD_INTERFACE:${Caffe2_HCRNG_DIR}/include> )
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    list(APPEND ALL_LIBRARIES -Wl caffe2_cpp_hip)
  else()
    list(APPEND ALL_LIBRARIES -Wl,--whole-archive caffe2_cpp_hip -Wl,--no-whole-archive)
  endif()
else()
  message("Skipping HIP...")
endif()

list(APPEND ALL_LIBRARIES ${CAFFE2_LIB})

if(CAFFE2_GPU_LIB)
  list(APPEND ALL_LIBRARIES ${CAFFE2_GPU_LIB})
  add_definitions(-DWITH_GPU)
endif()

if(CAFFE2_HIP_LIB)
  list(APPEND ALL_LIBRARIES ${CAFFE2_HIP_LIB})
  add_definitions(-DWITH_HIP_CAFFE)
endif()

list(APPEND ALL_LIBRARIES ${PROTOBUF_LIBRARY})
list(APPEND ALL_LIBRARIES ${GLOG_LIB} ${GFLAGS_LIB})
list(APPEND ALL_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})

if(OpenCV_LIBS)
  list(APPEND ALL_LIBRARIES ${OpenCV_LIBS})
  add_definitions(-DWITH_OPENCV)
endif()

if(CUDA_LIBRARIES)
  list(APPEND ALL_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_CUDART_LIBRARY} ${CUDA_CURAND_LIBRARY})
  add_definitions(-DWITH_CUDA)
endif()

if(CURL_LIBRARIES)
  list(APPEND ALL_LIBRARIES ${CURL_LIBRARIES})
  add_definitions(-DWITH_CURL)
endif()

file(GLOB BIN_SOURCES "${CMAKE_SOURCE_DIR}/src/caffe2/binaries/*.cc")
foreach(filename ${BIN_SOURCES})
  get_filename_component(name ${filename} NAME_WE)
  add_executable(${name} ${filename})
  target_link_libraries(${name} ${ALL_LIBRARIES})
endforeach()
